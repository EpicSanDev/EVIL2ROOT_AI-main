#!/bin/bash

# Script pour tester l'installation am√©lior√©e de causalml sans reconstruire le Docker
# Version adapt√©e pour les environnements cloud (Render.com)

set -e

echo "========================================="
echo "üß™ Test d'installation de causalml"
echo "========================================="

# D√©terminer la commande Python √† utiliser
if command -v python3 &>/dev/null; then
    PYTHON_CMD="python3"
else
    PYTHON_CMD="python"
fi

# V√©rifier si causalml est d√©j√† install√©
if $PYTHON_CMD -m pip show causalml > /dev/null 2>&1; then
    echo "‚ö†Ô∏è causalml est d√©j√† install√©. D√©sinstallation..."
    $PYTHON_CMD -m pip uninstall -y causalml
fi

# D√©sinstaller les packages potentiellement conflictuels
echo "üßπ Nettoyage des packages potentiellement conflictuels..."
$PYTHON_CMD -m pip uninstall -y cython || true
$PYTHON_CMD -m pip uninstall -y numpy || true

# Ex√©cuter le script d'installation am√©lior√©
echo "üöÄ Ex√©cution du script d'installation am√©lior√©..."
chmod +x docker/fix-causalml-install.sh
./docker/fix-causalml-install.sh

# V√©rifier le r√©sultat
RESULT=$?
if [ $RESULT -eq 0 ]; then
    echo "‚úÖ Le script s'est termin√© avec succ√®s."
else
    echo "‚ö†Ô∏è Le script s'est termin√© avec des avertissements (code $RESULT), mais un package factice a √©t√© cr√©√©."
fi

# Tester l'importation de causalml
echo "üîç Test d'importation de causalml..."
$PYTHON_CMD -c "import causalml; print(f'üì¶ causalml import√© avec succ√®s! Version: {causalml.__version__}')" || echo "‚ùå √âchec de l'importation de causalml"

# V√©rifier si les fonctions principales sont disponibles
echo "üîç V√©rification des fonctionnalit√©s disponibles..."
$PYTHON_CMD -c "
try:
    from causalml.inference.tree import UpliftTreeClassifier
    print('‚úÖ UpliftTreeClassifier disponible')
except (ImportError, NotImplementedError) as e:
    print(f'‚ö†Ô∏è UpliftTreeClassifier non disponible: {e}')

try:
    from causalml.inference.meta import BaseXLearner
    print('‚úÖ BaseXLearner disponible')
except (ImportError, NotImplementedError) as e:
    print(f'‚ö†Ô∏è BaseXLearner non disponible: {e}')
" || echo "‚ùå Erreur lors de la v√©rification des fonctionnalit√©s"

echo "========================================="
echo "Test termin√©"
echo "=========================================" 