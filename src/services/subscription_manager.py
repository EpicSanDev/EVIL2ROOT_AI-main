"""
Service de gestion des abonnements.
Ce module g√®re la v√©rification et le renouvellement des abonnements.
"""

import os
import logging
from typing import List, Dict, Any, Optional
import asyncio
from datetime import datetime, timedelta

from app.models.user import User, UserManager, SubscriptionType
from app.services.notification_service import notification_service

# Configuration du logger
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SubscriptionManager:
    """
    Service de gestion des abonnements.
    G√®re la v√©rification et le renouvellement des abonnements.
    """
    
    @staticmethod
    async def check_expiring_subscriptions(days_threshold: int = 3) -> None:
        """
        V√©rifie les abonnements qui expirent bient√¥t et envoie des notifications.
        
        Args:
            days_threshold: Nombre de jours avant l'expiration pour envoyer une notification
        """
        # R√©cup√©rer les abonnements qui expirent bient√¥t
        expiring_users = SubscriptionManager._get_expiring_users(days_threshold)
        
        for user in expiring_users:
            if user.telegram_id:
                # Calculer le nombre de jours restants
                days_left = user.get_subscription_days_left()
                
                # Pr√©parer le message
                message = (
                    f"‚ö†Ô∏è *Votre abonnement expire bient√¥t*\n\n"
                    f"Bonjour, votre abonnement *{user.subscription_type.capitalize()}* "
                    f"expire dans *{days_left} jour{'s' if days_left > 1 else ''}*.\n\n"
                    f"Pour continuer √† b√©n√©ficier de toutes les fonctionnalit√©s premium, "
                    f"veuillez renouveler votre abonnement."
                )
                
                # Ajouter des boutons pour le renouvellement
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [InlineKeyboardButton("üîÑ Renouveler mon abonnement", callback_data="subscribe")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # Envoyer la notification
                await notification_service.send_notification(user.telegram_id, message, reply_markup)
                
                logger.info(f"Notification d'expiration envoy√©e √† l'utilisateur {user.username} (ID: {user.id})")
    
    @staticmethod
    async def check_expired_subscriptions() -> None:
        """
        V√©rifie les abonnements qui ont expir√© et envoie des notifications.
        """
        # R√©cup√©rer les abonnements qui ont expir√©
        expired_users = SubscriptionManager._get_expired_users()
        
        for user in expired_users:
            if user.telegram_id:
                # Pr√©parer le message
                message = (
                    f"‚ùå *Votre abonnement a expir√©*\n\n"
                    f"Bonjour, votre abonnement *{user.subscription_type.capitalize()}* a expir√©.\n\n"
                    f"Vous n'avez plus acc√®s aux fonctionnalit√©s premium. "
                    f"Pour les r√©activer, veuillez souscrire √† un nouvel abonnement."
                )
                
                # Ajouter des boutons pour le renouvellement
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [
                    [InlineKeyboardButton("üí∞ S'abonner √† nouveau", callback_data="subscribe")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # Envoyer la notification
                await notification_service.send_notification(user.telegram_id, message, reply_markup)
                
                logger.info(f"Notification d'expiration envoy√©e √† l'utilisateur {user.username} (ID: {user.id})")
    
    @staticmethod
    def _get_expiring_users(days_threshold: int) -> List[User]:
        """
        R√©cup√®re les utilisateurs dont l'abonnement expire bient√¥t.
        
        Args:
            days_threshold: Nombre de jours avant l'expiration
            
        Returns:
            Liste des utilisateurs dont l'abonnement expire bient√¥t
        """
        conn = None
        users = []
        
        try:
            conn = UserManager.get_db_connection()
            with conn.cursor() as cur:
                # Date limite d'expiration (aujourd'hui + days_threshold)
                expiry_date = datetime.now() + timedelta(days=days_threshold)
                
                # Requ√™te pour r√©cup√©rer les utilisateurs dont l'abonnement expire bient√¥t
                cur.execute("""
                SELECT id, username, email, telegram_id, subscription_type, subscription_expiry, is_active
                FROM users
                WHERE is_active = TRUE 
                AND telegram_id IS NOT NULL
                AND subscription_type != 'free'
                AND subscription_expiry <= %s
                AND subscription_expiry > NOW()
                """, (expiry_date,))
                
                # Traiter les r√©sultats
                for row in cur.fetchall():
                    user = User(
                        id=row[0],
                        username=row[1],
                        email=row[2],
                        telegram_id=row[3],
                        subscription_type=row[4],
                        subscription_expiry=row[5],
                        is_active=row[6]
                    )
                    users.append(user)
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des utilisateurs dont l'abonnement expire bient√¥t: {e}")
        finally:
            if conn:
                conn.close()
        
        return users
    
    @staticmethod
    def _get_expired_users() -> List[User]:
        """
        R√©cup√®re les utilisateurs dont l'abonnement a expir√©.
        
        Returns:
            Liste des utilisateurs dont l'abonnement a expir√©
        """
        conn = None
        users = []
        
        try:
            conn = UserManager.get_db_connection()
            with conn.cursor() as cur:
                # Requ√™te pour r√©cup√©rer les utilisateurs dont l'abonnement a expir√©
                cur.execute("""
                SELECT id, username, email, telegram_id, subscription_type, subscription_expiry, is_active
                FROM users
                WHERE is_active = TRUE 
                AND telegram_id IS NOT NULL
                AND subscription_type != 'free'
                AND subscription_expiry < NOW()
                AND subscription_expiry > NOW() - INTERVAL '1 day'  -- Expir√© depuis moins d'un jour
                """)
                
                # Traiter les r√©sultats
                for row in cur.fetchall():
                    user = User(
                        id=row[0],
                        username=row[1],
                        email=row[2],
                        telegram_id=row[3],
                        subscription_type=row[4],
                        subscription_expiry=row[5],
                        is_active=row[6]
                    )
                    users.append(user)
                
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des utilisateurs dont l'abonnement a expir√©: {e}")
        finally:
            if conn:
                conn.close()
        
        return users

# Instance globale du gestionnaire d'abonnements
subscription_manager = SubscriptionManager() 