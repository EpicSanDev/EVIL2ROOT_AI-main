version: '3.8'

x-gpu-runtime: &gpu-runtime
  # Ce bloc est une référence YAML qui sera utilisée conditionnellement
  runtime: nvidia
  environment:
    - NVIDIA_VISIBLE_DEVICES=all
    - TF_FORCE_GPU_ALLOW_GROWTH=true

services:
  # Service API FastAPI
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: evil2root-api
    restart: always
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-evil2root}
      - DB_PASSWORD=${DB_PASSWORD:-ChangeMe123!}
      - DB_NAME=${DB_NAME:-evil2root_trading}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key}
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - evil2root-network

  # Service Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: evil2root-frontend
    restart: always
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    depends_on:
      - api
    networks:
      - evil2root-network

  # Base de données PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: evil2root-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER:-evil2root}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-ChangeMe123!}
      - POSTGRES_DB=${DB_NAME:-evil2root_trading}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - evil2root-network

  # Service Redis
  redis:
    image: redis:7-alpine
    container_name: evil2root-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - evil2root-network

  # Service de supervision
  adminer:
    image: adminer
    container_name: evil2root-adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - evil2root-network

  # Service de workers Celery pour les tâches asynchrones
  worker:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: evil2root-worker
    restart: always
    command: celery -A src.api.tasks.celery_app worker --loglevel=info
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-evil2root}
      - DB_PASSWORD=${DB_PASSWORD:-ChangeMe123!}
      - DB_NAME=${DB_NAME:-evil2root_trading}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - evil2root-network

  # Nginx pour le proxy inverse
  nginx:
    image: nginx:alpine
    container_name: evil2root-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - api
      - frontend
    networks:
      - evil2root-network

# Définition des secrets
secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  admin_password:
    file: ./secrets/admin_password.txt
  telegram_token:
    file: ./secrets/telegram_token.txt
  finnhub_api_key:
    file: ./secrets/finnhub_api_key.txt
  openrouter_api_key:
    file: ./secrets/openrouter_api_key.txt
  coinbase_api_key:
    file: ./secrets/coinbase_api_key.txt
  coinbase_webhook_secret:
    file: ./secrets/coinbase_webhook_secret.txt

volumes:
  postgres_data:
  redis_data:

networks:
  evil2root-network:
    driver: bridge
