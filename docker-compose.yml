version: '3.8'

x-gpu-runtime: &gpu-runtime
  # Ce bloc est une référence YAML qui sera utilisée conditionnellement
  runtime: nvidia
  environment:
    - NVIDIA_VISIBLE_DEVICES=all
    - TF_FORCE_GPU_ALLOW_GROWTH=true

services:
  web:
    build: .
    image: evil2root/trading-bot:latest
    container_name: trading-bot-web
    command: web-with-scheduler
    ports:
      - "5000:5000"
      - "9090:9090"  # Port for Prometheus metrics
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./saved_models:/app/saved_models
    env_file:
      - .env.non-sensitive
    secrets:
      - db_user
      - db_password
      - secret_key
      - admin_password
      - telegram_token
      - finnhub_api_key
      - openrouter_api_key
      - coinbase_api_key
      - coinbase_webhook_secret
    environment:
      - DB_USER_FILE=/run/secrets/db_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - ADMIN_PASSWORD_FILE=/run/secrets/admin_password
      - TELEGRAM_TOKEN_FILE=/run/secrets/telegram_token
      - FINNHUB_API_KEY_FILE=/run/secrets/finnhub_api_key
      - OPENROUTER_API_KEY_FILE=/run/secrets/openrouter_api_key
      - COINBASE_API_KEY_FILE=/run/secrets/coinbase_api_key
      - COINBASE_WEBHOOK_SECRET_FILE=/run/secrets/coinbase_webhook_secret
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  analysis-bot:
    build: .
    image: evil2root/trading-bot:latest
    container_name: trading-bot-analysis
    entrypoint: ["/app/analysis-bot-entrypoint.sh"]
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./saved_models:/app/saved_models:rw
    env_file:
      - .env.non-sensitive
    secrets:
      - db_user
      - db_password
      - admin_password
      - finnhub_api_key
    environment:
      - DB_USER_FILE=/run/secrets/db_user
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - ADMIN_PASSWORD_FILE=/run/secrets/admin_password
      - FINNHUB_API_KEY_FILE=/run/secrets/finnhub_api_key
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  market-scheduler:
    build: .
    image: evil2root/trading-bot:latest
    container_name: trading-bot-market-scheduler
    command: scheduler
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./saved_models:/app/saved_models
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  train-and-analyze:
    build: .
    image: evil2root/trading-bot:latest
    container_name: trading-bot-train-analyze
    command: train-and-analyze
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./saved_models:/app/saved_models
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: no  # Ce service ne redémarre pas automatiquement
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 8G
    environment:
      - USE_GPU=${USE_GPU:-true}

  market-scheduler-force-train:
    build: .
    image: evil2root/trading-bot:latest
    container_name: trading-bot-market-scheduler-force-train
    command: scheduler-force-train
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./saved_models:/app/saved_models
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: no  # Ce service ne redémarre pas automatiquement
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 8G
    environment:
      - USE_GPU=${USE_GPU:-true}

  db:
    image: postgres:13
    container_name: trading-bot-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    secrets:
      - db_user
      - db_password
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db_user) -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G

  redis:
    image: redis:6
    container_name: trading-bot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G

  adminer:
    image: adminer
    container_name: trading-bot-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db

  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9091:9090"
    restart: unless-stopped
    depends_on:
      - web

  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

  # Optional: Uncomment to enable TensorBoard for model visualization
  # tensorboard:
  #   build: .
  #   image: evil2root/trading-bot:latest
  #   container_name: trading-bot-tensorboard
  #   command: tensorboard --logdir=/app/logs/tensorboard --host=0.0.0.0 --port=6006
  #   volumes:
  #     - ./logs:/app/logs
  #   ports:
  #     - "6006:6006"
  #   restart: unless-stopped

# Définition des secrets
secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  admin_password:
    file: ./secrets/admin_password.txt
  telegram_token:
    file: ./secrets/telegram_token.txt
  finnhub_api_key:
    file: ./secrets/finnhub_api_key.txt
  openrouter_api_key:
    file: ./secrets/openrouter_api_key.txt
  coinbase_api_key:
    file: ./secrets/coinbase_api_key.txt
  coinbase_webhook_secret:
    file: ./secrets/coinbase_webhook_secret.txt

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
