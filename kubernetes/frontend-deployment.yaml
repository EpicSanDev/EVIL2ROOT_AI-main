apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-bot-frontend
  namespace: evil2root-trading
  labels:
    app: trading-bot
    component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: trading-bot
      component: frontend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: trading-bot
        component: frontend
    spec:
      terminationGracePeriodSeconds: 30
      imagePullSecrets:
      - name: registry-evil2root-registry
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: frontend
        image: registry.digitalocean.com/evil2root-registry/evil2root-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: trading-bot
                  component: frontend
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: trading-bot
            component: frontend
---
apiVersion: v1
kind: Service
metadata:
  name: trading-bot-frontend
  namespace: evil2root-trading
  labels:
    app: trading-bot
    component: frontend
spec:
  ports:
  - port: 80
    targetPort: 80
    name: http
  selector:
    app: trading-bot
    component: frontend
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: trading-bot-frontend-ingress
  namespace: evil2root-trading
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/x-frame-options: "SAMEORIGIN"
    nginx.ingress.kubernetes.io/enable-xss-protection: "true"
    nginx.ingress.kubernetes.io/xss-protection-mode: "block"
    nginx.ingress.kubernetes.io/x-content-type-options: "nosniff"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self' https://trading-api.example.com";
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
spec:
  tls:
  - hosts:
    - ui.trading.example.com
    secretName: frontend-tls
  rules:
  - host: ui.trading.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: trading-bot-frontend
            port:
              number: 80 