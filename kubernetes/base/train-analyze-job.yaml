apiVersion: batch/v1
kind: Job
metadata:
  name: train-and-analyze
  namespace: evil2root-trading
  labels:
    app: trading-bot
    component: train-analyze
spec:
  ttlSecondsAfterFinished: 86400  # Les jobs sont conservés pendant 24 heures après leur fin
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: trading-bot
        component: train-analyze
      annotations:
        timestamp: "${TIMESTAMP}"
    spec:
      imagePullSecrets:
      - name: registry-epicsandev
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: train-analyze
        image: registry.digitalocean.com/epicsandev/evil2root-ai:latest
        imagePullPolicy: Always
        args: ["train-and-analyze"]
        env:
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_APP
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_ENV
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_NAME
        - name: DB_HOST
          value: "postgres"
        - name: REDIS_HOST
          value: "redis"
        - name: TF_FORCE_GPU_ALLOW_GROWTH
          value: "true"
        - name: TZ
          value: "UTC"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "16Gi"
            cpu: "4000m"
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: saved-models
          mountPath: /app/saved_models
        - name: tmp-volume
          mountPath: /tmp
          readOnly: false
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs
      - name: saved-models
        persistentVolumeClaim:
          claimName: saved-models
      - name: tmp-volume
        emptyDir: {}
      restartPolicy: Never
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: Exists
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scheduled-train-analyze
  namespace: evil2root-trading
  labels:
    app: trading-bot
    component: train-analyze-cron
spec:
  schedule: "0 0 * * *"  # Tous les jours à minuit
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 86400  # Les jobs sont conservés pendant 24 heures après leur fin
      backoffLimit: 3
      template:
        metadata:
          labels:
            app: trading-bot
            component: train-analyze
          annotations:
            timestamp: "${TIMESTAMP}"
        spec:
          imagePullSecrets:
          - name: registry-epicsandev
          securityContext:
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          containers:
          - name: train-analyze
            image: registry.digitalocean.com/epicsandev/evil2root-ai:latest
            imagePullPolicy: Always
            args: ["train-and-analyze"]
            env:
            - name: FLASK_APP
              valueFrom:
                configMapKeyRef:
                  name: trading-bot-config
                  key: FLASK_APP
            - name: FLASK_ENV
              valueFrom:
                configMapKeyRef:
                  name: trading-bot-config
                  key: FLASK_ENV
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: trading-bot-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trading-bot-secrets
                  key: DB_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: trading-bot-secrets
                  key: DB_NAME
            - name: DB_HOST
              value: "postgres"
            - name: REDIS_HOST
              value: "redis"
            - name: TF_FORCE_GPU_ALLOW_GROWTH
              value: "true"
            - name: TZ
              value: "UTC"
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            resources:
              requests:
                memory: "4Gi"
                cpu: "2000m"
              limits:
                memory: "16Gi"
                cpu: "4000m"
            volumeMounts:
            - name: app-data
              mountPath: /app/data
            - name: app-logs
              mountPath: /app/logs
            - name: saved-models
              mountPath: /app/saved_models
            - name: tmp-volume
              mountPath: /tmp
              readOnly: false
          volumes:
          - name: app-data
            persistentVolumeClaim:
              claimName: app-data
          - name: app-logs
            persistentVolumeClaim:
              claimName: app-logs
          - name: saved-models
            persistentVolumeClaim:
              claimName: saved-models
          - name: tmp-volume
            emptyDir: {}
          restartPolicy: Never
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                preference:
                  matchExpressions:
                  - key: node-role.kubernetes.io/worker
                    operator: Exists 