apiVersion: apps/v1
kind: Deployment
metadata:
  name: market-scheduler
  namespace: evil2root-trading
  labels:
    app: trading-bot
    component: market-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: trading-bot
      component: market-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: trading-bot
        component: market-scheduler
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        checksum/config: "${CHECKSUM_CONFIG}"
        checksum/secrets: "${CHECKSUM_SECRETS}"
        timestamp: "${TIMESTAMP}"
    spec:
      imagePullSecrets:
      - name: registry-epicsandev
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: market-scheduler
        image: registry.digitalocean.com/epicsandev/evil2root-ai:latest
        imagePullPolicy: Always
        args: ["scheduler"]
        ports:
        - containerPort: 9090
          name: metrics
        env:
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_APP
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_ENV
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_NAME
        - name: DB_HOST
          value: "postgres"
        - name: REDIS_HOST
          value: "redis"
        - name: TZ
          value: "UTC"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: saved-models
          mountPath: /app/saved_models
        - name: tmp-volume
          mountPath: /tmp
          readOnly: false
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - ps aux | grep "scheduler" | grep -v grep
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - test -f /app/logs/scheduler_ready.txt
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: Exists
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs
      - name: saved-models
        persistentVolumeClaim:
          claimName: saved-models
      - name: tmp-volume
        emptyDir: {} 