apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-bot-web
  namespace: evil2root-trading
spec:
  replicas: 2
  selector:
    matchLabels:
      app: trading-bot
      component: web
  template:
    metadata:
      labels:
        app: trading-bot
        component: web
    spec:
      containers:
      - name: web
        image: evil2root/trading-bot:latest
        imagePullPolicy: Always
        args: ["web-with-scheduler"]
        ports:
        - containerPort: 5000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_APP
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_ENV
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_NAME
        - name: DB_HOST
          value: "postgres"
        - name: REDIS_HOST
          value: "redis"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: saved-models
          mountPath: /app/saved_models
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 120
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs
      - name: saved-models
        persistentVolumeClaim:
          claimName: saved-models
---
apiVersion: v1
kind: Service
metadata:
  name: trading-bot-web
  namespace: evil2root-trading
spec:
  ports:
  - port: 5000
    targetPort: 5000
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: trading-bot
    component: web
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: trading-bot-web-ingress
  namespace: evil2root-trading
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - trading.example.com
    secretName: trading-tls
  rules:
  - host: trading.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: trading-bot-web
            port:
              number: 5000 