apiVersion: apps/v1
kind: Deployment
metadata:
  name: trading-bot-web
  namespace: evil2root-trading
  labels:
    app: trading-bot
    component: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: trading-bot
      component: web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: trading-bot
        component: web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      terminationGracePeriodSeconds: 60
      imagePullSecrets:
      - name: registry-evil2root-registry
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: web
        image: registry.digitalocean.com/evil2root-registry/evil2root-ai:latest
        imagePullPolicy: Always
        args: ["web-with-scheduler"]
        ports:
        - containerPort: 5000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_APP
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: trading-bot-config
              key: FLASK_ENV
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: DB_NAME
        - name: DB_HOST
          value: "postgres"
        - name: REDIS_HOST
          value: "redis"
        - name: TZ
          value: "UTC"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: saved-models
          mountPath: /app/saved_models
        - name: tmp-volume
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 12
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: trading-bot
                  component: web
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: Exists
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: trading-bot
            component: web
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs
      - name: saved-models
        persistentVolumeClaim:
          claimName: saved-models
      - name: tmp-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: trading-bot-web
  namespace: evil2root-trading
  labels:
    app: trading-bot
    component: web
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  ports:
  - port: 5000
    targetPort: 5000
    name: http
  - port: 9090
    targetPort: 9090
    name: metrics
  selector:
    app: trading-bot
    component: web
  type: ClusterIP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: trading-bot-web-ingress
  namespace: evil2root-trading
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
    nginx.ingress.kubernetes.io/x-frame-options: "SAMEORIGIN"
    nginx.ingress.kubernetes.io/enable-xss-protection: "true"
    nginx.ingress.kubernetes.io/xss-protection-mode: "block"
    nginx.ingress.kubernetes.io/x-content-type-options: "nosniff"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'";
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
spec:
  tls:
  - hosts:
    - trading.example.com
    secretName: trading-tls
  rules:
  - host: trading.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: trading-bot-web
            port:
              number: 5000 