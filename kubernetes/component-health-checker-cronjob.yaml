apiVersion: batch/v1
kind: CronJob
metadata:
  name: component-health-checker
  namespace: evil2root-trading
  labels:
    app: component-health-checker
    role: monitoring
spec:
  schedule: "*/30 * * * *"  # Exécution toutes les 30 minutes
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 900  # Timeout après 15 minutes
      template:
        metadata:
          labels:
            app: component-health-checker
            role: monitoring
        spec:
          serviceAccountName: component-health-checker-sa  # Service account avec les permissions nécessaires
          restartPolicy: OnFailure
          containers:
          - name: health-checker
            image: ${REGISTRY_URL}/component-health-checker:latest
            imagePullPolicy: Always
            env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: "INFO"
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: TZ
              value: "Europe/Paris"
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 500m
                memory: 512Mi
            volumeMounts:
            - name: logs
              mountPath: /var/log/health-checks
            - name: config
              mountPath: /etc/health-checker/config
              readOnly: true
          volumes:
          - name: logs
            persistentVolumeClaim:
              claimName: health-checker-logs-pvc
          - name: config
            configMap:
              name: health-checker-config
              defaultMode: 0644
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: component-health-checker-sa
  namespace: evil2root-trading
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: component-health-checker-role
  namespace: evil2root-trading
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: component-health-checker-binding
  namespace: evil2root-trading
subjects:
- kind: ServiceAccount
  name: component-health-checker-sa
  namespace: evil2root-trading
roleRef:
  kind: Role
  name: component-health-checker-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: health-checker-logs-pvc
  namespace: evil2root-trading
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-checker-config
  namespace: evil2root-trading
data:
  config.json: |
    {
      "components": {
        "required_secrets": [
          "db-credentials",
          "api-keys",
          "trading-credentials"
        ],
        "required_configmaps": [
          "app-config",
          "trading-parameters"
        ],
        "resource_thresholds": {
          "cpu_high_millicore": 800,
          "memory_high_mb": 1024,
          "memory_high_gb": 1
        }
      },
      "monitoring": {
        "high_resource_threshold": 80,
        "log_error_keywords": [
          "ERROR",
          "Exception",
          "Traceback",
          "Failed",
          "Timeout"
        ]
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: health-checker-dashboard
  namespace: evil2root-trading
  labels:
    app: component-health-checker
    role: monitoring
spec:
  selector:
    app: component-health-checker-ui
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: ClusterIP 