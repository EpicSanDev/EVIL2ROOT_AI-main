name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main ]

env:
  DIGITALOCEAN_REGISTRY: registry.digitalocean.com/evil2root-registry
  DEPLOYMENT_NAME: evil2root-ai
  COMPONENT_CHECKER_NAME: component-health-checker
  NAMESPACE: evil2root-trading

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:latest,${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:buildcache,mode=max

      - name: Build and push Component Health Checker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.component-health-checker
          push: true
          tags: ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.COMPONENT_CHECKER_NAME }}:latest,${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.COMPONENT_CHECKER_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.COMPONENT_CHECKER_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.COMPONENT_CHECKER_NAME }}:buildcache,mode=max

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create Kubernetes cluster if it doesn't exist
        run: |
          # Vérifier si le cluster existe déjà
          if ! doctl kubernetes cluster get evil2root-trading &>/dev/null; then
            echo "Le cluster n'existe pas. Création du cluster Kubernetes..."
            
            # Créer un nouveau cluster Kubernetes
            doctl kubernetes cluster create evil2root-trading \
              --region fra1 \
              --size s-2vcpu-4gb \
              --count 4 \
              --auto-upgrade=true \
              --ha=true
            
            echo "Cluster Kubernetes créé avec succès."
          else
            echo "Le cluster Kubernetes existe déjà."
          fi
          
          # Enregistrer le fichier kubeconfig
          doctl kubernetes cluster kubeconfig save evil2root-trading

      - name: Create registry secret
        run: |
          # Création du namespace s'il n'existe pas
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Création du secret pour le registre DigitalOcean
          kubectl create secret docker-registry registry-evil2root-registry \
            --namespace=${{ env.NAMESPACE }} \
            --docker-server=registry.digitalocean.com \
            --docker-username=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            --docker-password=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            --docker-email=${{ secrets.NOTIFICATION_EMAIL }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Apply storage resources
        run: |
          echo "Application des ressources de stockage..."
          
          # Vérifier si le fichier storage.yaml existe
          if [ -f kubernetes/storage.yaml ]; then
            # Mettre à jour la classe de stockage si nécessaire
            sed -i 's/storageClassName: standard/storageClassName: do-block-storage/g' kubernetes/storage.yaml
            kubectl apply -f kubernetes/storage.yaml
          else
            echo "Le fichier kubernetes/storage.yaml n'existe pas."
          fi
          
          # Vérifier les PVCs existants
          echo "Vérification des PVCs existants..."
          kubectl get pvc -n ${{ env.NAMESPACE }}

      - name: Create application secrets
        run: |
          # Application des secrets à partir d'un fichier YAML avec substitution des variables d'environnement
          cat <<EOF > temp-secrets.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: trading-bot-secrets
            namespace: ${{ env.NAMESPACE }}
          type: Opaque
          stringData:
            DB_USER: "${{ secrets.DB_USER || 'postgres' }}"
            DB_PASSWORD: "${{ secrets.DB_PASSWORD || 'changeme' }}"
            DB_NAME: "${{ secrets.DB_NAME || 'tradingbot' }}"
            REDIS_PASSWORD: "${{ secrets.REDIS_PASSWORD || 'changeme' }}"
            GRAFANA_ADMIN_USER: "${{ secrets.GRAFANA_ADMIN_USER || 'admin' }}"
            GRAFANA_ADMIN_PASSWORD: "${{ secrets.GRAFANA_ADMIN_PASSWORD || 'admin' }}"
          EOF
          
          kubectl apply -f temp-secrets.yaml
          rm temp-secrets.yaml

      - name: Deploy infrastructure components
        run: |
          # Installation de metrics-server s'il n'est pas déjà installé
          if ! kubectl get deployment metrics-server -n kube-system &> /dev/null; then
            echo "Installation de metrics-server..."
            kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          else
            echo "Le metrics-server est déjà installé."
          fi
          
          # Installation de Nginx Ingress Controller s'il n'est pas déjà installé
          if ! kubectl get namespace ingress-nginx &> /dev/null; then
            echo "Installation de Nginx Ingress Controller..."
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml
            
            echo "Attente de l'initialisation du contrôleur Ingress Nginx..."
            kubectl wait --namespace ingress-nginx \
              --for=condition=ready pod \
              --selector=app.kubernetes.io/component=controller \
              --timeout=180s || echo "Le délai d'attente pour l'ingress controller a expiré, mais on continue"
          else
            echo "Nginx Ingress Controller est déjà installé."
          fi
          
          # Déploiement des services de base (Redis, PostgreSQL)
          kubectl apply -f kubernetes/services/redis.yaml || echo "Erreur lors du déploiement de Redis, assurez-vous que le fichier existe"
          kubectl apply -f kubernetes/services/postgres.yaml || echo "Erreur lors du déploiement de PostgreSQL, assurez-vous que le fichier existe"

      - name: Deploy application components
        run: |
          # Supprimer les déploiements existants s'ils existent
          echo "Suppression des déploiements existants..."
          kubectl delete deployment trading-bot-web --namespace=${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete deployment analysis-bot --namespace=${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete deployment market-scheduler --namespace=${{ env.NAMESPACE }} --ignore-not-found=true
          
          # Attendre que les pods soient complètement supprimés
          echo "Attente de la suppression complète des pods..."
          kubectl wait --for=delete pod --selector=app=trading-bot-web --namespace=${{ env.NAMESPACE }} --timeout=60s || true
          kubectl wait --for=delete pod --selector=app=analysis-bot --namespace=${{ env.NAMESPACE }} --timeout=60s || true
          kubectl wait --for=delete pod --selector=app=market-scheduler --namespace=${{ env.NAMESPACE }} --timeout=60s || true
          
          # Déploiement des composants de l'application
          echo "Déploiement des nouveaux composants avec l'image: ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:${{ github.sha }}"
          
          # Mise à jour des fichiers de déploiement avec la dernière image
          sed -i "s|image:.*|image: ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:${{ github.sha }}|g" kubernetes/deployments/trading-bot-web.yaml
          sed -i "s|image:.*|image: ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:${{ github.sha }}|g" kubernetes/deployments/analysis-bot.yaml
          sed -i "s|image:.*|image: ${{ env.DIGITALOCEAN_REGISTRY }}/${{ env.DEPLOYMENT_NAME }}:${{ github.sha }}|g" kubernetes/deployments/market-scheduler.yaml
          
          # Augmenter les limites de ressources
          sed -i "s|memory: 256Mi|memory: 512Mi|g" kubernetes/deployments/trading-bot-web.yaml
          sed -i "s|memory: 512Mi|memory: 1Gi|g" kubernetes/deployments/trading-bot-web.yaml
          sed -i "s|memory: 256Mi|memory: 512Mi|g" kubernetes/deployments/analysis-bot.yaml
          sed -i "s|memory: 512Mi|memory: 1Gi|g" kubernetes/deployments/analysis-bot.yaml
          sed -i "s|memory: 256Mi|memory: 512Mi|g" kubernetes/deployments/market-scheduler.yaml
          sed -i "s|memory: 512Mi|memory: 1Gi|g" kubernetes/deployments/market-scheduler.yaml
          
          # Réduire le nombre de réplicas pour économiser des ressources
          sed -i "s|replicas: 3|replicas: 2|g" kubernetes/deployments/trading-bot-web.yaml
          sed -i "s|replicas: 3|replicas: 2|g" kubernetes/deployments/analysis-bot.yaml
          sed -i "s|replicas: 2|replicas: 1|g" kubernetes/deployments/market-scheduler.yaml
          
          # Déploiement des composants de l'application
          kubectl apply -f kubernetes/deployments/trading-bot-web.yaml
          kubectl apply -f kubernetes/deployments/analysis-bot.yaml
          kubectl apply -f kubernetes/deployments/market-scheduler.yaml
          
          # Déploiement des services
          kubectl apply -f kubernetes/services/trading-bot-web.yaml
          kubectl apply -f kubernetes/services/web-service.yaml
          
          # Déploiement de l'ingress (avec une pause pour s'assurer que le webhook est prêt)
          echo "Attente avant le déploiement de l'ingress..."
          sleep 30
          kubectl apply -f kubernetes/ingress/trading-bot-web-ingress.yaml || {
            echo "Première tentative de déploiement de l'ingress échouée. Attente supplémentaire..."
            sleep 60
            kubectl apply -f kubernetes/ingress/trading-bot-web-ingress.yaml
          }
          
          # Déploiement des autoscalers
          kubectl apply -f kubernetes/hpa/trading-bot-web-hpa.yaml
          kubectl apply -f kubernetes/hpa/analysis-bot-hpa.yaml
          
          echo "Application déployée avec succès !"

      - name: Deploy Component Health Checker
        run: |
          echo "Déploiement du vérificateur de santé des composants..."
          
          # Préparation du manifeste avec la bonne image
          sed "s|\${REGISTRY_URL}|${{ env.DIGITALOCEAN_REGISTRY }}|g" \
            kubernetes/component-health-checker-cronjob.yaml > kubernetes/component-health-checker-cronjob-temp.yaml
          
          # Remplacer le tag d'image pour utiliser le SHA du commit
          sed -i "s|:latest|:${{ github.sha }}|g" kubernetes/component-health-checker-cronjob-temp.yaml
          
          # Déploiement du vérificateur de santé
          kubectl apply -f kubernetes/component-health-checker-cronjob-temp.yaml
          
          # Nettoyage
          rm -f kubernetes/component-health-checker-cronjob-temp.yaml
          
          # Suppression du job de test précédent s'il existe
          echo "Suppression du job de test précédent s'il existe..."
          kubectl delete job component-health-checker-test -n ${{ env.NAMESPACE }} --ignore-not-found=true
          
          # Attendre que le job soit complètement supprimé
          echo "Attente de la suppression complète du job..."
          kubectl wait --for=delete job/component-health-checker-test -n ${{ env.NAMESPACE }} --timeout=30s || true
          
          echo "Démarrage d'un job de test du vérificateur de santé..."
          kubectl create job --from=cronjob/component-health-checker component-health-checker-test -n ${{ env.NAMESPACE }}
          
          # Le job sera automatiquement supprimé après le déploiement par le CronJob lui-même

      - name: Wait for services and create report
        run: |
          echo "Attente de l'initialisation des services..."
          sleep 30
          
          # Récupérer et afficher l'IP externe du service
          echo "Récupération de l'IP externe..."
          
          MAX_RETRIES=20
          RETRY_COUNT=0
          
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
            EXTERNAL_IP=$(kubectl get svc -n ${{ env.NAMESPACE }} web-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            
            if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "<pending>" ]; then
              echo "Application déployée avec succès !"
              echo "Vous pouvez accéder à l'application en utilisant l'IP: $EXTERNAL_IP"
              
              # Enregistrer l'IP dans une variable d'environnement GitHub
              echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "En attente de l'IP externe... ($RETRY_COUNT/$MAX_RETRIES)"
            sleep 15
          done
          
          # Afficher l'état actuel des pods
          echo "État actuel des pods:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          
          # Afficher l'état actuel des services
          echo "État actuel des services:"
          kubectl get services -n ${{ env.NAMESPACE }}
          
          # Afficher l'état actuel de l'ingress
          echo "État actuel de l'ingress:"
          kubectl get ingress -n ${{ env.NAMESPACE }}
          
          # Afficher l'état du CronJob du vérificateur de santé
          echo "État du vérificateur de santé des composants:"
          kubectl get cronjob -n ${{ env.NAMESPACE }} | grep component-health-checker || echo "Le vérificateur de santé n'est pas encore déployé" 