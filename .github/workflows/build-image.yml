name: Build and Push Docker Image

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.BUILDER_SSH_KEY }}

      - name: Configure SSH with connection persistence and retry options
        run: |
          mkdir -p ~/.ssh
          echo '${{ secrets.BUILDER_HOST_KEY }}' >> ~/.ssh/known_hosts
          cat > ~/.ssh/config << EOF
          Host *
            ServerAliveInterval 60
            ServerAliveCountMax 10
            ConnectTimeout 30
            ConnectionAttempts 5
            TCPKeepAlive yes
            StrictHostKeyChecking yes
          EOF
          chmod 600 ~/.ssh/config

      - name: Copy repository to builder droplet with retry
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]
          do
            rsync -avz --exclude='.git' --timeout=90 ./ root@${{ secrets.BUILDER_IP }}:/opt/builder/ && break
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Rsync failed. Retry $RETRY_COUNT of $MAX_RETRIES in 10 seconds..."
            sleep 10
          done
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "Failed to copy files after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Configure Docker authentication on builder droplet
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]
          do
            ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 root@${{ secrets.BUILDER_IP }} 'doctl auth init -t ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}' && \
            ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 root@${{ secrets.BUILDER_IP }} 'doctl registry login' && break
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "SSH command failed. Retry $RETRY_COUNT of $MAX_RETRIES in 10 seconds..."
            sleep 10
          done
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "Failed to configure Docker authentication after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Build Docker image on builder droplet
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]
          do
            ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 root@${{ secrets.BUILDER_IP }} 'cd /opt/builder && docker build -t registry.digitalocean.com/evil2root-registry/evil2root-ai:latest .' && break
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Docker build failed. Retry $RETRY_COUNT of $MAX_RETRIES in 10 seconds..."
            sleep 10
          done
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "Failed to build Docker image after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Push image to DigitalOcean Container Registry
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]
          do
            ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 root@${{ secrets.BUILDER_IP }} 'docker push registry.digitalocean.com/evil2root-registry/evil2root-ai:latest' && break
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "Docker push failed. Retry $RETRY_COUNT of $MAX_RETRIES in 10 seconds..."
            sleep 10
          done
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "Failed to push Docker image after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Update App Platform deployment
        run: |
          doctl apps list --format ID,Spec.Name | grep evil2root-ai
          APP_ID=$(doctl apps list --format ID,Spec.Name | grep evil2root-ai | awk '{print $1}')
          if [ -n "$APP_ID" ]; then
            doctl apps update $APP_ID --format ID --wait
            echo "App deployment triggered for $APP_ID"
          else
            echo "App not found, please deploy manually first"
          fi 