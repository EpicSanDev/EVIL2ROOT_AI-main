"""
Int√©gration entre le bot Telegram et Coinbase Commerce pour les paiements.
Ce module ajoute des fonctionnalit√©s de paiement via Coinbase Commerce au bot Telegram.
"""

import os
import logging
from typing import Dict, Any, Optional, Tuple
from datetime import datetime
import qrcode
from io import BytesIO

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CallbackQueryHandler,
    CommandHandler, MessageHandler, filters
)

from app.models.user import User, UserManager, SubscriptionType
from app.services.coinbase_payment import coinbase_payment_service

# Configuration du logger
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# √âtats de conversation pour ConversationHandler
(
    CHOOSING_SUBSCRIPTION, CONFIRMING_PAYMENT, WAITING_FOR_PAYMENT,
    CHECKING_PAYMENT_STATUS
) = range(4)

# Callbacks des boutons
class CoinbaseCallbacks:
    SUBSCRIBE = "cb_subscribe"
    SUBSCRIPTION = "cb_subscription"
    CONFIRM_PAYMENT = "cb_confirm_payment"
    CHECK_PAYMENT = "cb_check_payment"
    CANCEL_PAYMENT = "cb_cancel_payment"
    BACK = "cb_back"

class TelegramCoinbaseIntegration:
    """
    Classe g√©rant l'int√©gration entre le bot Telegram et Coinbase Commerce.
    """
    
    def __init__(self):
        """Initialisation de l'int√©gration"""
        self.user_data = {}  # Stockage temporaire des donn√©es utilisateur
    
    def get_handlers(self):
        """
        Renvoie les gestionnaires pour l'int√©gration Coinbase.
        √Ä utiliser pour ajouter ces gestionnaires √† l'application Telegram.
        """
        # Gestionnaire de conversation pour l'abonnement via Coinbase
        subscription_conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.subscription_menu, pattern=f"^{CoinbaseCallbacks.SUBSCRIBE}$"),
            ],
            states={
                CHOOSING_SUBSCRIPTION: [
                    CallbackQueryHandler(
                        self.choose_subscription,
                        pattern=f"^{CoinbaseCallbacks.SUBSCRIPTION}_"
                    ),
                    CallbackQueryHandler(self.back_to_main, pattern=f"^{CoinbaseCallbacks.BACK}$")
                ],
                CONFIRMING_PAYMENT: [
                    CallbackQueryHandler(
                        self.create_coinbase_payment,
                        pattern=f"^{CoinbaseCallbacks.CONFIRM_PAYMENT}_"
                    ),
                    CallbackQueryHandler(self.subscription_menu, pattern=f"^{CoinbaseCallbacks.BACK}$")
                ],
                WAITING_FOR_PAYMENT: [
                    CallbackQueryHandler(
                        self.check_payment_status,
                        pattern=f"^{CoinbaseCallbacks.CHECK_PAYMENT}_"
                    ),
                    CallbackQueryHandler(
                        self.cancel_payment,
                        pattern=f"^{CoinbaseCallbacks.CANCEL_PAYMENT}$"
                    )
                ],
            },
            fallbacks=[
                CommandHandler("cancel", self.cancel_conversation),
                CommandHandler("start", self.back_to_main)
            ],
        )
        
        return [subscription_conv_handler]
    
    async def subscription_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Affiche le menu des abonnements"""
        query = update.callback_query
        await query.answer()
        
        # R√©cup√©rer l'utilisateur
        db_user = self._get_user_from_update(update)
        
        # V√©rifier si l'utilisateur a d√©j√† un abonnement actif
        if db_user and db_user.is_subscription_active() and db_user.subscription_type != SubscriptionType.FREE:
            # L'utilisateur a d√©j√† un abonnement actif
            subscription_info = (
                f"üí´ *Votre abonnement actuel (Coinbase Commerce)*\n\n"
                f"Type: *{db_user.subscription_type.capitalize()}*\n"
                f"Expire le: *{db_user.subscription_expiry.strftime('%d/%m/%Y')}*\n"
                f"Jours restants: *{db_user.get_subscription_days_left()}*\n\n"
                f"Souhaitez-vous prolonger votre abonnement ou changer de forfait?"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ Prolonger", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_{db_user.subscription_type}"),
                    InlineKeyboardButton("üîù Changer de forfait", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_change")
                ],
                [InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data=CoinbaseCallbacks.BACK)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(subscription_info, reply_markup=reply_markup, parse_mode='Markdown')
            
            if "subscription_change" in self.user_data.get(str(db_user.id), {}):
                return CHOOSING_SUBSCRIPTION
            else:
                return CHOOSING_SUBSCRIPTION
        
        else:
            # L'utilisateur n'a pas d'abonnement actif ou a un abonnement gratuit
            subscription_info = (
                "üöÄ *Abonnez-vous pour acc√©der aux fonctionnalit√©s premium (via Coinbase Commerce)*\n\n"
                "Choisissez l'un de nos forfaits adapt√©s √† vos besoins:\n\n"
                "üîπ *Basic* - 10$/mois\n"
                "‚Ä¢ Notifications de trading en temps r√©el\n"
                "‚Ä¢ Acc√®s √† 5 paires de trading\n"
                "‚Ä¢ Analyses quotidiennes\n\n"
                "üîπ *Premium* - 20$/mois\n"
                "‚Ä¢ Tout ce qui est inclus dans Basic\n"
                "‚Ä¢ Acc√®s √† 20 paires de trading\n"
                "‚Ä¢ Alertes de march√© personnalis√©es\n"
                "‚Ä¢ Signaux de trading avanc√©s\n\n"
                "üîπ *Enterprise* - 50$/mois\n"
                "‚Ä¢ Tout ce qui est inclus dans Premium\n"
                "‚Ä¢ Acc√®s illimit√© √† toutes les paires\n"
                "‚Ä¢ Analyse approfondie par IA\n"
                "‚Ä¢ Support prioritaire 24/7\n"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîπ Basic", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_basic")],
                [InlineKeyboardButton("üîπ Premium", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_premium")],
                [InlineKeyboardButton("üîπ Enterprise", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_enterprise")],
                [InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data=CoinbaseCallbacks.BACK)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(subscription_info, reply_markup=reply_markup, parse_mode='Markdown')
            
            return CHOOSING_SUBSCRIPTION
    
    async def choose_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Gestionnaire pour le choix d'un abonnement"""
        query = update.callback_query
        await query.answer()
        
        user = self._get_user_from_update(update)
        if not user:
            await query.edit_message_text("Erreur: Utilisateur non trouv√©. Veuillez red√©marrer avec /start.")
            return ConversationHandler.END
        
        data = query.data.split('_')
        if len(data) < 2:
            return CHOOSING_SUBSCRIPTION
        
        subscription_type = data[1]
        
        if subscription_type == "change":
            # L'utilisateur veut changer de forfait
            user_id_str = str(user.id)
            self.user_data[user_id_str] = {"subscription_change": True}
            
            # Afficher les options d'abonnement
            subscription_info = (
                "üîÑ *Changer de forfait (Coinbase Commerce)*\n\n"
                "Choisissez votre nouveau forfait:\n\n"
                "üîπ *Basic* - 10$/mois\n"
                "‚Ä¢ Notifications de trading en temps r√©el\n"
                "‚Ä¢ Acc√®s √† 5 paires de trading\n"
                "‚Ä¢ Analyses quotidiennes\n\n"
                "üîπ *Premium* - 20$/mois\n"
                "‚Ä¢ Tout ce qui est inclus dans Basic\n"
                "‚Ä¢ Acc√®s √† 20 paires de trading\n"
                "‚Ä¢ Alertes de march√© personnalis√©es\n"
                "‚Ä¢ Signaux de trading avanc√©s\n\n"
                "üîπ *Enterprise* - 50$/mois\n"
                "‚Ä¢ Tout ce qui est inclus dans Premium\n"
                "‚Ä¢ Acc√®s illimit√© √† toutes les paires\n"
                "‚Ä¢ Analyse approfondie par IA\n"
                "‚Ä¢ Support prioritaire 24/7\n"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîπ Basic", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_basic")],
                [InlineKeyboardButton("üîπ Premium", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_premium")],
                [InlineKeyboardButton("üîπ Enterprise", callback_data=f"{CoinbaseCallbacks.SUBSCRIPTION}_enterprise")],
                [InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data=CoinbaseCallbacks.BACK)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(subscription_info, reply_markup=reply_markup, parse_mode='Markdown')
            
            return CHOOSING_SUBSCRIPTION
        
        # Stocker le type d'abonnement choisi
        user_id_str = str(user.id)
        if not user_id_str in self.user_data:
            self.user_data[user_id_str] = {}
        
        self.user_data[user_id_str]['subscription_type'] = subscription_type
        
        # R√©cup√©rer le prix et la dur√©e de l'abonnement
        price = coinbase_payment_service.get_subscription_price(subscription_type)
        duration = coinbase_payment_service.get_subscription_duration(subscription_type)
        
        self.user_data[user_id_str]['price'] = price
        self.user_data[user_id_str]['duration'] = duration
        
        # Afficher un r√©capitulatif avant de cr√©er un paiement
        payment_summary = (
            f"üí≥ *R√©capitulatif de votre abonnement (Coinbase Commerce)*\n\n"
            f"Type: *{subscription_type.capitalize()}*\n"
            f"Prix: *{price} USD*\n"
            f"Dur√©e: *{duration} jours*\n\n"
            f"En confirmant, vous serez redirig√© vers Coinbase Commerce pour effectuer votre paiement en cryptomonnaie.\n"
            f"Vous pourrez payer en Bitcoin, Ethereum, et d'autres crypto-monnaies populaires."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirmer", callback_data=f"{CoinbaseCallbacks.CONFIRM_PAYMENT}_{subscription_type}")],
            [InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data=CoinbaseCallbacks.BACK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_summary, reply_markup=reply_markup, parse_mode='Markdown')
        
        return CONFIRMING_PAYMENT
    
    async def create_coinbase_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Cr√©e un paiement via Coinbase Commerce"""
        query = update.callback_query
        await query.answer()
        
        user = self._get_user_from_update(update)
        if not user:
            await query.edit_message_text("Erreur: Utilisateur non trouv√©. Veuillez red√©marrer avec /start.")
            return ConversationHandler.END
        
        data = query.data.split('_')
        if len(data) < 2:
            return CONFIRMING_PAYMENT
        
        subscription_type = data[1]
        user_id_str = str(user.id)
        
        # Cr√©er une charge via Coinbase Commerce
        metadata = {
            "telegram_id": str(update.effective_user.id),
            "username": update.effective_user.username or "unknown",
            "subscription_change": self.user_data.get(user_id_str, {}).get("subscription_change", False)
        }
        
        success, charge = coinbase_payment_service.create_charge(user.id, subscription_type, metadata)
        
        if not success:
            await query.edit_message_text(
                "‚ùå Une erreur s'est produite lors de la cr√©ation du paiement. "
                "Veuillez r√©essayer plus tard ou contacter le support."
            )
            return ConversationHandler.END
        
        # Stocker les informations de la charge
        self.user_data[user_id_str]['charge_id'] = charge['id']
        self.user_data[user_id_str]['created_at'] = datetime.now().isoformat()
        
        # R√©cup√©rer l'URL de paiement h√©berg√©e par Coinbase
        hosted_url = charge.get('hosted_url', '')
        
        # Afficher les informations de paiement
        payment_info = (
            f"üßæ *D√©tails du paiement Coinbase Commerce*\n\n"
            f"Abonnement: *{subscription_type.capitalize()}*\n"
            f"Montant: *{self.user_data[user_id_str]['price']} USD*\n"
            f"Dur√©e: *{self.user_data[user_id_str]['duration']} jours*\n\n"
            f"Veuillez cliquer sur le bouton ci-dessous pour proc√©der au paiement via Coinbase Commerce. "
            f"Vous pouvez payer avec plusieurs cryptomonnaies.\n\n"
            f"Une fois le paiement effectu√©, revenez ici et cliquez sur \"V√©rifier le paiement\"."
        )
        
        keyboard = [
            [InlineKeyboardButton("üí∞ Payer maintenant", url=hosted_url)],
            [InlineKeyboardButton("üîÑ V√©rifier le paiement", callback_data=f"{CoinbaseCallbacks.CHECK_PAYMENT}_{charge['id']}")],
            [InlineKeyboardButton("‚ùå Annuler", callback_data=CoinbaseCallbacks.CANCEL_PAYMENT)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_info, reply_markup=reply_markup, parse_mode='Markdown')
        
        return WAITING_FOR_PAYMENT
    
    async def check_payment_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """V√©rifie le statut d'un paiement Coinbase Commerce"""
        query = update.callback_query
        await query.answer()
        
        user = self._get_user_from_update(update)
        if not user:
            await query.edit_message_text("Erreur: Utilisateur non trouv√©. Veuillez red√©marrer avec /start.")
            return ConversationHandler.END
        
        data = query.data.split('_')
        if len(data) < 2:
            return WAITING_FOR_PAYMENT
        
        charge_id = data[1]
        user_id_str = str(user.id)
        
        # V√©rifier que c'est bien la charge de cet utilisateur
        if user_id_str not in self.user_data or self.user_data[user_id_str].get('charge_id') != charge_id:
            await query.edit_message_text("Erreur: Paiement non trouv√© pour cet utilisateur.")
            return ConversationHandler.END
        
        # V√©rifier le statut de la charge
        success, status, charge_data = coinbase_payment_service.verify_charge_status(charge_id)
        
        if not success:
            await query.edit_message_text(
                "‚ùå Une erreur s'est produite lors de la v√©rification du paiement. "
                "Veuillez r√©essayer plus tard ou contacter le support."
            )
            return ConversationHandler.END
        
        # Traiter en fonction du statut
        if status == "completed":
            # Paiement confirm√© - mettre √† jour l'abonnement
            subscription_type = self.user_data[user_id_str]['subscription_type']
            duration = self.user_data[user_id_str]['duration']
            
            # Mettre √† jour l'abonnement dans la base de donn√©es
            from app.api.payment_webhooks import update_user_subscription
            success = update_user_subscription(user.id, subscription_type, duration)
            
            if success:
                # R√©cup√©rer l'utilisateur mis √† jour
                updated_user = UserManager.get_user_by_id(user.id)
                
                # Envoyer la confirmation de paiement
                success_message = (
                    f"‚úÖ *Paiement confirm√© avec succ√®s!*\n\n"
                    f"Merci pour votre abonnement *{updated_user.subscription_type.capitalize()}*.\n"
                    f"Votre abonnement est actif jusqu'au *{updated_user.subscription_expiry.strftime('%d/%m/%Y')}*.\n\n"
                    f"Vous avez maintenant acc√®s √† toutes les fonctionnalit√©s premium de EVIL2ROOT Trading Bot."
                )
                
                keyboard = [
                    [InlineKeyboardButton("üè† Menu principal", callback_data=CoinbaseCallbacks.BACK)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(success_message, reply_markup=reply_markup, parse_mode='Markdown')
                
                # Nettoyer les donn√©es utilisateur
                if user_id_str in self.user_data:
                    del self.user_data[user_id_str]
                
                return ConversationHandler.END
            else:
                await query.edit_message_text(
                    "‚ùå Une erreur s'est produite lors de la mise √† jour de l'abonnement. "
                    "Veuillez contacter le support."
                )
                return ConversationHandler.END
        
        elif status == "pending":
            # Paiement en attente
            payment_info = (
                f"‚è≥ *Paiement en cours de traitement*\n\n"
                f"Votre paiement a √©t√© d√©tect√© et est en cours de traitement. "
                f"Veuillez patienter quelques instants jusqu'√† confirmation compl√®te.\n\n"
                f"Vous pouvez v√©rifier √† nouveau l'√©tat du paiement en cliquant sur le bouton ci-dessous."
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ V√©rifier √† nouveau", callback_data=f"{CoinbaseCallbacks.CHECK_PAYMENT}_{charge_id}")],
                [InlineKeyboardButton("‚ùå Annuler", callback_data=CoinbaseCallbacks.CANCEL_PAYMENT)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_info, reply_markup=reply_markup, parse_mode='Markdown')
            
            return WAITING_FOR_PAYMENT
        
        elif status in ["canceled", "expired"]:
            # Paiement annul√© ou expir√©
            payment_info = (
                f"‚ùå *Paiement {status}*\n\n"
                f"Votre demande de paiement a √©t√© {status}.\n"
                f"Vous pouvez r√©essayer ou choisir un autre type d'abonnement."
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ R√©essayer", callback_data=CoinbaseCallbacks.SUBSCRIBE)],
                [InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data=CoinbaseCallbacks.BACK)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_info, reply_markup=reply_markup, parse_mode='Markdown')
            
            # Nettoyer les donn√©es utilisateur
            if user_id_str in self.user_data:
                del self.user_data[user_id_str]
            
            return ConversationHandler.END
        
        else:
            # Statut inconnu ou nouveau - demander de v√©rifier √† nouveau
            payment_info = (
                f"‚ÑπÔ∏è *Statut du paiement: {status}*\n\n"
                f"Votre paiement n'a pas encore √©t√© confirm√©.\n"
                f"Si vous avez d√©j√† effectu√© le paiement, veuillez patienter quelques instants "
                f"puis v√©rifier √† nouveau.\n\n"
                f"Vous pouvez √©galement cliquer sur le bouton \"Payer maintenant\" pour acc√©der "
                f"√† la page de paiement Coinbase Commerce."
            )
            
            # R√©cup√©rer l'URL de paiement h√©berg√©e par Coinbase
            hosted_url = charge_data.get('hosted_url', '')
            
            keyboard = [
                [InlineKeyboardButton("üí∞ Payer maintenant", url=hosted_url)],
                [InlineKeyboardButton("üîÑ V√©rifier √† nouveau", callback_data=f"{CoinbaseCallbacks.CHECK_PAYMENT}_{charge_id}")],
                [InlineKeyboardButton("‚ùå Annuler", callback_data=CoinbaseCallbacks.CANCEL_PAYMENT)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(payment_info, reply_markup=reply_markup, parse_mode='Markdown')
            
            return WAITING_FOR_PAYMENT
    
    async def cancel_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Annule un paiement en cours"""
        query = update.callback_query
        await query.answer()
        
        user = self._get_user_from_update(update)
        if user and str(user.id) in self.user_data:
            del self.user_data[str(user.id)]
        
        await query.edit_message_text(
            "‚ùå Paiement annul√©. Vous pouvez r√©essayer quand vous voulez."
        )
        
        return ConversationHandler.END
    
    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Retourne au menu principal"""
        query = update.callback_query
        await query.answer()
        
        # Envoyer un message pour revenir au menu principal
        await query.edit_message_text(
            "üè† Retour au menu principal. Utilisez /start pour afficher le menu."
        )
        
        return ConversationHandler.END
    
    async def cancel_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Annule la conversation en cours"""
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text("‚ùå Op√©ration annul√©e.")
        else:
            await update.message.reply_text("‚ùå Op√©ration annul√©e.")
        
        # Nettoyer les donn√©es utilisateur
        user = self._get_user_from_update(update)
        if user and str(user.id) in self.user_data:
            del self.user_data[str(user.id)]
        
        return ConversationHandler.END
    
    def _get_user_from_update(self, update: Update) -> Optional[User]:
        """
        R√©cup√®re l'utilisateur depuis la base de donn√©es en fonction de la mise √† jour Telegram.
        
        Args:
            update: Mise √† jour Telegram
            
        Returns:
            Utilisateur trouv√© ou None
        """
        telegram_id = str(update.effective_user.id)
        return UserManager.get_user_by_telegram_id(telegram_id)

# Instance globale de l'int√©gration Coinbase
telegram_coinbase_integration = TelegramCoinbaseIntegration() 