version: '3.8'

services:
  trading-bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: trading-bot
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - ENABLE_LIVE_TRADING=false
      - TZ=Europe/Paris
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
      - ../.env:/app/.env
    ports:
      - "5000:5000"
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    command: ["python", "src/main.py", "--mode", "paper"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  analysis-bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: analysis-bot
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - TZ=Europe/Paris
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
      - ../.env:/app/.env
    depends_on:
      - redis
      - postgres
    networks:
      - trading-network
    command: ["python", "src/models/ensemble/ensemble_model.py", "--mode", "analysis"]

  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_password
      - POSTGRES_DB=trading_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  adminer:
    image: adminer:latest
    container_name: trading-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - trading-network

  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=trading_secret
    networks:
      - trading-network
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  grafana-data:
  prometheus-data:
