apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-bot-config
  namespace: evil2root-trading
data:
  DB_HOST: "postgres"
  DB_PORT: "5432"
  DB_NAME: "trading_bot"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  APP_ENV: "development"
  LOG_LEVEL: "DEBUG"
---
apiVersion: v1
kind: Secret
metadata:
  name: trading-bot-secrets
  namespace: evil2root-trading
type: Opaque
stringData:
  db_user.txt: "postgres"
  db_password.txt: "postgres_password"
  secret_key.txt: "development_secret_key_12345"
  admin_password.txt: "admin_password"
  telegram_token.txt: "dummy_token"
  finnhub_api_key.txt: "dummy_key"
  openrouter_api_key.txt: "dummy_key"
  coinbase_api_key.txt: "dummy_key"
  coinbase_webhook_secret.txt: "dummy_secret"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: evil2root-trading
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: evil2root-trading
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: evil2root-trading
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: db_password.txt
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: trading-bot-secrets
              key: db_user.txt
        - name: POSTGRES_DB
          value: trading_bot
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
          subPath: postgres
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: evil2root-trading
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: evil2root-trading
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
          subPath: redis
        resources:
          limits:
            memory: "512Mi"
            cpu: "300m"
          requests:
            memory: "256Mi"
            cpu: "100m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: evil2root-trading
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
  namespace: evil2root-trading
  labels:
    app: adminer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer:latest
        ports:
        - containerPort: 8080
        env:
        - name: ADMINER_DEFAULT_SERVER
          value: postgres
        resources:
          limits:
            memory: "256Mi"
            cpu: "300m"
          requests:
            memory: "128Mi"
            cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: adminer
  namespace: evil2root-trading
spec:
  selector:
    app: adminer
  ports:
  - port: 8080
    targetPort: 8080
  type: NodePort
